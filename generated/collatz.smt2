(define-fun R ((counter Int) (divResult Int) (state Int)) Bool (and (and (>= counter 0) (>= divResult 0) (>= state 0)) (or (or (or (or (or (and (or (and (= (mod counter 4) 0) (= (mod (- divResult 1) 4) 0) (= state 2)) (and (= counter 0) (= divResult 0) (= state 2))) (not (and (and (= counter 0) (= divResult 1) (= state 0)) (and (= counter 0) (= divResult 0) (= state 0))))) (and (= (mod counter 4) 0) (= (mod (- divResult 2) 4) 0) (= state 2) (= (mod counter 2) 0) (= (mod divResult 2) 0) (= (mod state 2) 0))) (or (and (= (mod (- counter 2) 4) 0) (= (mod divResult 4) 0) (= state 2) (= (mod counter 2) 0) (= (mod divResult 2) 0) (= (mod state 2) 0)) (and (= (mod (- counter 2) 4) 0) (= (mod (- divResult 2) 4) 0) (= state 2) (= (mod counter 2) 0) (= (mod divResult 2) 0) (= (mod state 2) 0)))) (and (or (or (and (= (mod (- counter 1) 2) 0) (= (mod (- divResult 1) 2) 0) (= state 2)) (and (= (mod (- counter 1) 2) 0) (= divResult 0) (= state 2))) (and (= counter 0) (= divResult 0) (= state 2))) (not (and (or (and (= counter 1) (= divResult 1) (= state 0)) (and (= counter 1) (= divResult 0) (= state 0))) (and (= counter 0) (= divResult 0) (= state 0)))))) (or (or (or (and (= (mod counter 4) 0) (= (mod (- divResult 4) 4) 0) (= state 2) (= (mod counter 2) 0) (= (mod divResult 2) 0) (= (mod state 2) 0)) (and (= (mod counter 4) 0) (= (mod (- divResult 6) 4) 0) (= state 2) (= (mod counter 2) 0) (= (mod divResult 2) 0) (= (mod state 2) 0))) (or (and (= (mod (- counter 2) 4) 0) (= (mod (- divResult 4) 4) 0) (= state 2) (= (mod counter 2) 0) (= (mod divResult 2) 0) (= (mod state 2) 0)) (and (= (mod (- counter 2) 4) 0) (= (mod (- divResult 6) 4) 0) (= state 2) (= (mod counter 2) 0) (= (mod divResult 2) 0) (= (mod state 2) 0)))) (and (= (mod (- counter 2) 6) 0) (= (mod (- divResult 2) 2) 0) (= state 2)))) (or (or (and (= counter 2) (= divResult 0) (= state 0)) (and (= (mod (- counter 2) 2) 0) (= divResult 0) (= state 2) (= (mod counter 2) 0) (= (mod divResult 2) 0) (= (mod state 2) 0))) (or (and (= counter 2) (= divResult 2) (= state 0)) (and (= (mod (- counter 2) 2) 0) (= (mod (- divResult 2) 2) 0) (= state 2) (= (mod counter 2) 0) (= (mod divResult 2) 0) (= (mod state 2) 0)))))))